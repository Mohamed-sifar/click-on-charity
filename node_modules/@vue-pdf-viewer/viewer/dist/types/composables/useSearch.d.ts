import { Match } from '@/components';
import { ShallowRef } from 'vue';
import type { PDFDocumentProxy } from 'pdfjs-dist';
interface MatchValue extends Match {
    page: number;
}
export declare const useSearch: (pdfDoc: ShallowRef<PDFDocumentProxy | undefined>) => {
    searchValue: import("vue").Ref<string, string>;
    matches: import("vue").Ref<{
        page: number;
        start: {
            idx: number;
            offset: number;
        };
        end: {
            idx: number;
            offset: number;
        };
        str: string;
        oIndex: number;
    }[], MatchValue[] | {
        page: number;
        start: {
            idx: number;
            offset: number;
        };
        end: {
            idx: number;
            offset: number;
        };
        str: string;
        oIndex: number;
    }[]>;
    matchCount: import("vue").ComputedRef<number>;
    currentMatchIndex: import("vue").Ref<number | undefined, number | undefined>;
    currentMatch: import("vue").ComputedRef<{
        page: number;
        start: {
            idx: number;
            offset: number;
        };
        end: {
            idx: number;
            offset: number;
        };
        str: string;
        oIndex: number;
    } | undefined>;
    searching: import("vue").Ref<boolean, boolean>;
    openSearch: import("vue").Ref<boolean, boolean>;
    onOpenSearch: () => void;
    onCloseSearch: () => void;
    handleSelectNext: () => void;
    handleSelectPrev: () => void;
};
export {};
