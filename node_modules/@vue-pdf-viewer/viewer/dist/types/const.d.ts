import type { InjectionKey, Slot, Ref, ComponentPublicInstance, ShallowRef } from 'vue';
import type { License, ToolbarOptions, ViewerPdfPage } from './components';
export declare const DEFAULT_TOOLBAR_OPTIONS: ToolbarOptions;
export declare const PERCENTAGE = 100;
export declare const MIN_ZOOM_SCALE = 0.25;
export declare const MAX_ZOOM_SCALE = 10;
export declare const SCROLL_BAR_WIDTH = 20;
export declare const PAGE_PADDING = 8;
export declare const START_MOBILE_WIDTH = 768;
export declare const FILE_INPUT: InjectionKey<Ref<ComponentPublicInstance<import("vue").DefineComponent<{}, {
    triggerClick: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (file: string) => void;
} & {
    filenameChange: (file: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onChange?: ((file: string) => any) | undefined;
    onFilenameChange?: ((file: string) => any) | undefined;
}, {}, {}>, {}, {}, {}, {}, {}, import("vue").DefineComponent<{}, {
    triggerClick: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (file: string) => void;
} & {
    filenameChange: (file: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onChange?: ((file: string) => any) | undefined;
    onFilenameChange?: ((file: string) => any) | undefined;
}, {}, {}>, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | undefined, ComponentPublicInstance<import("vue").DefineComponent<{}, {
    triggerClick: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (file: string) => void;
} & {
    filenameChange: (file: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onChange?: ((file: string) => any) | undefined;
    onFilenameChange?: ((file: string) => any) | undefined;
}, {}, {}>, {}, {}, {}, {}, {}, import("vue").DefineComponent<{}, {
    triggerClick: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (file: string) => void;
} & {
    filenameChange: (file: string) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onChange?: ((file: string) => any) | undefined;
    onFilenameChange?: ((file: string) => any) | undefined;
}, {}, {}>, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | undefined>>;
export declare const TOOLBAR_OPTIONS: InjectionKey<Ref<ToolbarOptions | undefined, ToolbarOptions | undefined>>;
export declare const TOTAL_TOOL_OTHERS_MENU: InjectionKey<Ref<number, number>>;
export declare const IS_DARK: InjectionKey<Ref<boolean, boolean>>;
export declare const IS_MOBILE_VIEW: InjectionKey<Ref<boolean, boolean>>;
export declare const LOADER_IMAGE: InjectionKey<Slot<any> | undefined>;
export declare const PAGES_CONTAINER: InjectionKey<ShallowRef<HTMLDivElement | null>>;
export declare const pdfPagesKey: InjectionKey<ViewerPdfPage[] | null>;
export declare const FOCUSED_PAGE_NUMBER: InjectionKey<Ref<number, number>>;
export declare const ROTATION_DEGREE: InjectionKey<Ref<number, number>>;
export declare const TOTAL_PAGE: InjectionKey<Ref<number, number>>;
export declare const INITIAL_TEXT_LAYER: InjectionKey<boolean>;
export declare const DOWNLOAD_FILE: InjectionKey<() => Promise<void>>;
export declare const LICENSE: InjectionKey<ShallowRef<License | undefined>>;
