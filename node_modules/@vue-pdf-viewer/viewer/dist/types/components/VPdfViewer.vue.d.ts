import type { VPdfViewerProps, AnnotationEventPayload, HighlightEventPayload, TextLayerLoadedEventPayload, RotateEvent, ToolbarOptions } from './types';
import '../style.scss';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VPdfViewerProps>, {
        textLayer: boolean;
        initialPage: number;
        initialRotation: number;
        intent: string;
        annotationLayer: boolean;
        toolbarOptions: () => ToolbarOptions;
    }>>> & {
        onHighlight?: ((payload: HighlightEventPayload) => any) | undefined;
        onTextLoaded?: ((payload: TextLayerLoadedEventPayload) => any) | undefined;
        onAnnotation?: ((payload: AnnotationEventPayload) => any) | undefined;
        onAnnotationLoaded?: ((payload: any[]) => any) | undefined;
        onLoaded?: (() => any) | undefined;
        onRotate?: ((payload: RotateEvent) => any) | undefined;
        onLoadProgress?: ((payload: number) => any) | undefined;
        onXfaLoaded?: (() => any) | undefined;
    }, {
        goToPage: (page: number) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        annotation: (payload: AnnotationEventPayload) => void;
    } & {
        highlight: (payload: HighlightEventPayload) => void;
    } & {
        loaded: () => void;
    } & {
        loadProgress: (payload: number) => void;
    } & {
        textLoaded: (payload: TextLayerLoadedEventPayload) => void;
    } & {
        annotationLoaded: (payload: any[]) => void;
    } & {
        xfaLoaded: () => void;
    } & {
        rotate: (payload: RotateEvent) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VPdfViewerProps>, {
        textLayer: boolean;
        initialPage: number;
        initialRotation: number;
        intent: string;
        annotationLayer: boolean;
        toolbarOptions: () => ToolbarOptions;
    }>>> & {
        onHighlight?: ((payload: HighlightEventPayload) => any) | undefined;
        onTextLoaded?: ((payload: TextLayerLoadedEventPayload) => any) | undefined;
        onAnnotation?: ((payload: AnnotationEventPayload) => any) | undefined;
        onAnnotationLoaded?: ((payload: any[]) => any) | undefined;
        onLoaded?: (() => any) | undefined;
        onRotate?: ((payload: RotateEvent) => any) | undefined;
        onLoadProgress?: ((payload: number) => any) | undefined;
        onXfaLoaded?: (() => any) | undefined;
    }, {
        initialPage: number;
        initialRotation: number;
        textLayer: boolean;
        toolbarOptions: false | Partial<ToolbarOptions>;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VPdfViewerProps>, {
        textLayer: boolean;
        initialPage: number;
        initialRotation: number;
        intent: string;
        annotationLayer: boolean;
        toolbarOptions: () => ToolbarOptions;
    }>>> & {
        onHighlight?: ((payload: HighlightEventPayload) => any) | undefined;
        onTextLoaded?: ((payload: TextLayerLoadedEventPayload) => any) | undefined;
        onAnnotation?: ((payload: AnnotationEventPayload) => any) | undefined;
        onAnnotationLoaded?: ((payload: any[]) => any) | undefined;
        onLoaded?: (() => any) | undefined;
        onRotate?: ((payload: RotateEvent) => any) | undefined;
        onLoadProgress?: ((payload: number) => any) | undefined;
        onXfaLoaded?: (() => any) | undefined;
    }, {
        goToPage: (page: number) => void;
    }, {}, {}, {}, {
        initialPage: number;
        initialRotation: number;
        textLayer: boolean;
        toolbarOptions: false | Partial<ToolbarOptions>;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VPdfViewerProps>, {
    textLayer: boolean;
    initialPage: number;
    initialRotation: number;
    intent: string;
    annotationLayer: boolean;
    toolbarOptions: () => ToolbarOptions;
}>>> & {
    onHighlight?: ((payload: HighlightEventPayload) => any) | undefined;
    onTextLoaded?: ((payload: TextLayerLoadedEventPayload) => any) | undefined;
    onAnnotation?: ((payload: AnnotationEventPayload) => any) | undefined;
    onAnnotationLoaded?: ((payload: any[]) => any) | undefined;
    onLoaded?: (() => any) | undefined;
    onRotate?: ((payload: RotateEvent) => any) | undefined;
    onLoadProgress?: ((payload: number) => any) | undefined;
    onXfaLoaded?: (() => any) | undefined;
}, {
    goToPage: (page: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    annotation: (payload: AnnotationEventPayload) => void;
} & {
    highlight: (payload: HighlightEventPayload) => void;
} & {
    loaded: () => void;
} & {
    loadProgress: (payload: number) => void;
} & {
    textLoaded: (payload: TextLayerLoadedEventPayload) => void;
} & {
    annotationLoaded: (payload: any[]) => void;
} & {
    xfaLoaded: () => void;
} & {
    rotate: (payload: RotateEvent) => void;
}, string, {
    initialPage: number;
    initialRotation: number;
    textLayer: boolean;
    toolbarOptions: false | Partial<ToolbarOptions>;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        dropFileZone: (_: {
            isDark: boolean;
        }) => any;
        loader: (_: {
            progress: number;
            loaded: boolean;
        }) => any;
        loaderImage: (_: {}) => any;
        loaderProgress: (_: {
            progress: number;
        }) => any;
        thumbnailTool: (_: {
            onToggle: () => void;
        }) => any;
        pageNavigationTool: (_: {
            total: number;
            current: number;
            onNext: () => void;
            onPrev: () => void;
            onChangePage: (pageNumber: number) => void;
        }) => any;
        zoomTool: (_: {
            currentScale: number;
            zoom: (nextScale: number) => void;
        }) => any;
        themeTool: (_: {
            isDark: boolean;
            onClick: () => void;
        }) => any;
        openFileTool: (_: {
            onClick: () => void;
        }) => any;
        downloadTool: (_: {
            onClick: () => void;
        }) => any;
        printTool: (_: {
            onClick: () => Promise<void>;
        }) => any;
        fullScreenTool: (_: {
            onClick: () => Promise<void>;
            isSupported: boolean;
        }) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
